
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001244 memsz 0x00001244 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000038ec memsz 0x00008120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000526  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000002e  00008126  00008126  00001126  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  00008154  00008154  00001154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000038ec  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00004820  0000c900  0000c900  000058ec  2**5
                  ALLOC
  5 .comment      00000011  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00005900  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000403  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000014f  00000000  00000000  00005d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000138  00000000  00000000  00005e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f3  00000000  00000000  00005fca  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00008126 l    d  .rodata	00000000 .rodata
00008154 l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c900 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c05 l       .text	00000000 offset
00007c18 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e8b l       .text	00000000 gdt_desc
00007e91 l       .text	00000000 idt_desc
00007e7f l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000c900 l     O .bss	00000004 row.1736
0000a000 l     O .data	00001000 pg_table
0000c8e8 l     O .data	00000004 task_tss.1786
0000c0e8 g     O .data	00000800 gdt_table
0000c920 g     O .bss	00001000 task0_dpl3_stack
0000d920 g     O .bss	00001000 task1_dpl3_stack
00007f15 g     F .text	0000002e sys_show
00007f43 g     F .text	0000002c task_0
0000c000 g     O .data	00000068 task0_tss
00009000 g     O .data	00001000 map_phy_buffer
00007e4b g       .text	00000000 timer_int
00007ff2 g     F .text	00000134 os_init
0000e920 g     O .bss	00001000 task1_dpl0_stack
0000c080 g     O .data	00000068 task1_tss
00007e97 g     F .text	0000007e do_syscall
00007c00 g       .text	00000000 _start
00007f9b g     F .text	0000001f outb
0000c8ec g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c8ec g       .data	00000000 _edata
00011120 g       .bss	00000000 _end
00007e5f g       .text	00000000 syscall_handler
00007f6f g     F .text	0000002c task_1
0000f920 g     O .bss	00000800 idt_table
00010120 g     O .bss	00001000 task0_dpl0_stack
00007fba g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 设置段寄存器
	jmp $0, $offset
    7c00:	ea                   	.byte 0xea
    7c01:	05                   	.byte 0x5
    7c02:	7c 00                	jl     7c04 <_start+0x4>
	...

00007c05 <offset>:
offset:
	mov $0, %ax
    7c05:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c0a:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c0c:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c0e:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c10:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c12:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c18 <read_self_all>:


read_self_all:
	mov $_start_32, %bx
    7c18:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx
    7c1d:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax
	mov $0x80, %dx
    7c23:	00 cd                	add    %cl,%ch
	int $0x13
    7c25:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli
    7c28:	fa                   	cli    
	lgdt gdt_desc
    7c29:	0f 01 16             	lgdtl  (%esi)
    7c2c:	8b 7e 0f             	mov    0xf(%esi),%edi
	lidt idt_desc
    7c2f:	01 1e                	add    %ebx,(%esi)
    7c31:	91                   	xchg   %eax,%ecx
    7c32:	7e 66                	jle    7c9a <read_self_all+0x82>
	mov $1, %eax
    7c34:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c39:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c3c:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfb:	00 00                	add    %al,(%eax)
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	.byte 0x55, 0xaa

	.code32
	.text
_start_32:
		mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
		mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
		mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
		mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
		mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp

		call os_init
    7e0f:	e8 de 01 00 00       	call   7ff2 <os_init>
		
		mov $pg_dir, %eax
    7e14:	b8 00 b0 00 00       	mov    $0xb000,%eax
		mov %eax, %cr3
    7e19:	0f 22 d8             	mov    %eax,%cr3

		mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
		orl $(1 << 4), %eax
    7e1f:	83 c8 10             	or     $0x10,%eax
		mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

		mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
		orl $(1 << 31), %eax
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
		mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

		mov $TASK0_TSS_SEG, %ax
    7e30:	66 b8 28 00          	mov    $0x28,%ax
		ltr %ax 
    7e34:	0f 00 d8             	ltr    %ax

		push $APP_DATA_SEG
    7e37:	6a 23                	push   $0x23
		push $task0_dpl3_stack + 1024 * 4
    7e39:	68 20 d9 00 00       	push   $0xd920
		push $0x202
    7e3e:	68 02 02 00 00       	push   $0x202
		push $APP_CODE_SEG
    7e43:	6a 1b                	push   $0x1b
		push $task_0_entry
    7e45:	68 7f 7e 00 00       	push   $0x7e7f
		iret
    7e4a:	cf                   	iret   

00007e4b <timer_int>:
		
timer_int:
	push %ds
    7e4b:	1e                   	push   %ds
	pusha 
    7e4c:	60                   	pusha  

	mov $0x20, %al
    7e4d:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e4f:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e51:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e55:	8e d8                	mov    %eax,%ds
	call task_sched
    7e57:	e8 5e 01 00 00       	call   7fba <task_sched>

	popa
    7e5c:	61                   	popa   
	pop %ds
    7e5d:	1f                   	pop    %ds

	iret
    7e5e:	cf                   	iret   

00007e5f <syscall_handler>:

syscall_handler:
	push %ds
    7e5f:	1e                   	push   %ds
	pusha 
    7e60:	60                   	pusha  

	mov $KERNEL_DATA_SEG, %ax
    7e61:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e65:	8e d8                	mov    %eax,%ds

	mov %esp ,%ebp
    7e67:	89 e5                	mov    %esp,%ebp
	push 13 * 4(%ebp)
    7e69:	ff 75 34             	pushl  0x34(%ebp)
	push 12 * 4(%ebp)
    7e6c:	ff 75 30             	pushl  0x30(%ebp)
	push 11 * 4(%ebp)
    7e6f:	ff 75 2c             	pushl  0x2c(%ebp)
	call do_syscall
    7e72:	e8 20 00 00 00       	call   7e97 <do_syscall>
	add $(3*4), %esp
    7e77:	83 c4 0c             	add    $0xc,%esp

	popa
    7e7a:	61                   	popa   
	pop %ds
    7e7b:	1f                   	pop    %ds

	retf $(3*4)
    7e7c:	ca 0c 00             	lret   $0xc

00007e7f <task_0_entry>:


task_0_entry:
	mov %ss, %ax
    7e7f:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e82:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e84:	8e c0                	mov    %eax,%es
	jmp task_0			// 跳转到任务0运行
    7e86:	e9 b8 00 00 00       	jmp    7f43 <task_0>

00007e8b <gdt_desc>:
    7e8b:	ff 07                	incl   (%edi)
    7e8d:	e8                   	.byte 0xe8
    7e8e:	c0 00 00             	rolb   $0x0,(%eax)

00007e91 <idt_desc>:
    7e91:	ff 07                	incl   (%edi)
    7e93:	20 f9                	and    %bh,%cl
	...

00007e97 <do_syscall>:

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

void do_syscall(int func, char* str, char color) {
    7e97:	55                   	push   %ebp
    7e98:	89 e5                	mov    %esp,%ebp
    7e9a:	83 ec 14             	sub    $0x14,%esp
    7e9d:	8b 45 10             	mov    0x10(%ebp),%eax
    7ea0:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 0;
    if (func == 2) {
    7ea3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7ea7:	75 69                	jne    7f12 <do_syscall+0x7b>
        unsigned short* dest = (unsigned short*)0xb8000 + 80 * row;
    7ea9:	8b 15 00 c9 00 00    	mov    0xc900,%edx
    7eaf:	89 d0                	mov    %edx,%eax
    7eb1:	c1 e0 02             	shl    $0x2,%eax
    7eb4:	01 d0                	add    %edx,%eax
    7eb6:	c1 e0 05             	shl    $0x5,%eax
    7eb9:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ebe:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*str) {
    7ec1:	eb 27                	jmp    7eea <do_syscall+0x53>
            *dest++ = *str++ | (color << 8);
    7ec3:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ec6:	8d 50 01             	lea    0x1(%eax),%edx
    7ec9:	89 55 0c             	mov    %edx,0xc(%ebp)
    7ecc:	0f b6 00             	movzbl (%eax),%eax
    7ecf:	66 98                	cbtw   
    7ed1:	0f be 55 ec          	movsbl -0x14(%ebp),%edx
    7ed5:	c1 e2 08             	shl    $0x8,%edx
    7ed8:	09 d0                	or     %edx,%eax
    7eda:	89 c1                	mov    %eax,%ecx
    7edc:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7edf:	8d 50 02             	lea    0x2(%eax),%edx
    7ee2:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7ee5:	89 ca                	mov    %ecx,%edx
    7ee7:	66 89 10             	mov    %dx,(%eax)
        while (*str) {
    7eea:	8b 45 0c             	mov    0xc(%ebp),%eax
    7eed:	0f b6 00             	movzbl (%eax),%eax
    7ef0:	84 c0                	test   %al,%al
    7ef2:	75 cf                	jne    7ec3 <do_syscall+0x2c>
        }
        row = (row >= 25) ? 0 : row + 1;
    7ef4:	a1 00 c9 00 00       	mov    0xc900,%eax
    7ef9:	83 f8 18             	cmp    $0x18,%eax
    7efc:	7f 0a                	jg     7f08 <do_syscall+0x71>
    7efe:	a1 00 c9 00 00       	mov    0xc900,%eax
    7f03:	83 c0 01             	add    $0x1,%eax
    7f06:	eb 05                	jmp    7f0d <do_syscall+0x76>
    7f08:	b8 00 00 00 00       	mov    $0x0,%eax
    7f0d:	a3 00 c9 00 00       	mov    %eax,0xc900
    }
}
    7f12:	90                   	nop
    7f13:	c9                   	leave  
    7f14:	c3                   	ret    

00007f15 <sys_show>:

void sys_show(char* str, char color) {
    7f15:	55                   	push   %ebp
    7f16:	89 e5                	mov    %esp,%ebp
    7f18:	83 ec 14             	sub    $0x14,%esp
    7f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f1e:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint32_t addr[] = {0, SYSCALL_SEG};
    7f21:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f28:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)
    __asm__ __volatile__("push %[color]; push %[str]; push %[id]; lcalll *(%[a])" ::[a] "r"(addr), [color] "m"(color), [str] "m"(str), [id] "r"(2));
    7f2f:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f32:	ba 02 00 00 00       	mov    $0x2,%edx
    7f37:	ff 75 ec             	pushl  -0x14(%ebp)
    7f3a:	ff 75 08             	pushl  0x8(%ebp)
    7f3d:	52                   	push   %edx
    7f3e:	ff 18                	lcall  *(%eax)
}
    7f40:	90                   	nop
    7f41:	c9                   	leave  
    7f42:	c3                   	ret    

00007f43 <task_0>:

void task_0(void) {
    7f43:	55                   	push   %ebp
    7f44:	89 e5                	mov    %esp,%ebp
    7f46:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7f49:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    char* str = "task_0: hello, syscall";
    7f4d:	c7 45 f8 26 81 00 00 	movl   $0x8126,-0x8(%ebp)
    for (;;) {
        sys_show(str, color++);
    7f54:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7f58:	8d 50 01             	lea    0x1(%eax),%edx
    7f5b:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7f5e:	0f be c0             	movsbl %al,%eax
    7f61:	50                   	push   %eax
    7f62:	ff 75 f8             	pushl  -0x8(%ebp)
    7f65:	e8 ab ff ff ff       	call   7f15 <sys_show>
    7f6a:	83 c4 08             	add    $0x8,%esp
    7f6d:	eb e5                	jmp    7f54 <task_0+0x11>

00007f6f <task_1>:
    }
}

void task_1(void) {
    7f6f:	55                   	push   %ebp
    7f70:	89 e5                	mov    %esp,%ebp
    7f72:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0xff;
    7f75:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    char* str = "task_1: hello, syscall";
    7f79:	c7 45 f8 3d 81 00 00 	movl   $0x813d,-0x8(%ebp)
    for (;;) {
        sys_show(str, color--);
    7f80:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7f84:	8d 50 ff             	lea    -0x1(%eax),%edx
    7f87:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7f8a:	0f be c0             	movsbl %al,%eax
    7f8d:	50                   	push   %eax
    7f8e:	ff 75 f8             	pushl  -0x8(%ebp)
    7f91:	e8 7f ff ff ff       	call   7f15 <sys_show>
    7f96:	83 c4 08             	add    $0x8,%esp
    7f99:	eb e5                	jmp    7f80 <task_1+0x11>

00007f9b <outb>:
    [TASK0_TSS_SEG / 8] = {0x68, 0, 0xe900, 0x0},
    [TASK1_TSS_SEG / 8] = {0x68, 0, 0xe900, 0x0},
    [SYSCALL_SEG / 8] = {0x0000, KERNEL_CODE_SEG, 0xec03, 0},
};

void outb(uint8_t data, uint16_t port) {
    7f9b:	55                   	push   %ebp
    7f9c:	89 e5                	mov    %esp,%ebp
    7f9e:	83 ec 08             	sub    $0x8,%esp
    7fa1:	8b 55 08             	mov    0x8(%ebp),%edx
    7fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fa7:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7faa:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
    7fae:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fb2:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fb6:	ee                   	out    %al,(%dx)
}
    7fb7:	90                   	nop
    7fb8:	c9                   	leave  
    7fb9:	c3                   	ret    

00007fba <task_sched>:

void task_sched(void) {
    7fba:	55                   	push   %ebp
    7fbb:	89 e5                	mov    %esp,%ebp
    7fbd:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;
    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    7fc0:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7fc5:	83 f8 28             	cmp    $0x28,%eax
    7fc8:	75 07                	jne    7fd1 <task_sched+0x17>
    7fca:	b8 30 00 00 00       	mov    $0x30,%eax
    7fcf:	eb 05                	jmp    7fd6 <task_sched+0x1c>
    7fd1:	b8 28 00 00 00       	mov    $0x28,%eax
    7fd6:	a3 e8 c8 00 00       	mov    %eax,0xc8e8
    uint32_t addr[] = {0, task_tss};
    7fdb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7fe2:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7fe7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
    7fea:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7fed:	ff 28                	ljmp   *(%eax)
}
    7fef:	90                   	nop
    7ff0:	c9                   	leave  
    7ff1:	c3                   	ret    

00007ff2 <os_init>:

void timer_int(void);
void syscall_handler(void);

void os_init(void) {
    7ff2:	55                   	push   %ebp
    7ff3:	89 e5                	mov    %esp,%ebp
    7ff5:	83 ec 10             	sub    $0x10,%esp
    outb(0x11, 0x20);
    7ff8:	6a 20                	push   $0x20
    7ffa:	6a 11                	push   $0x11
    7ffc:	e8 9a ff ff ff       	call   7f9b <outb>
    8001:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    8004:	68 a0 00 00 00       	push   $0xa0
    8009:	6a 11                	push   $0x11
    800b:	e8 8b ff ff ff       	call   7f9b <outb>
    8010:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);
    8013:	6a 21                	push   $0x21
    8015:	6a 20                	push   $0x20
    8017:	e8 7f ff ff ff       	call   7f9b <outb>
    801c:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    801f:	68 a1 00 00 00       	push   $0xa1
    8024:	6a 28                	push   $0x28
    8026:	e8 70 ff ff ff       	call   7f9b <outb>
    802b:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    802e:	6a 21                	push   $0x21
    8030:	6a 04                	push   $0x4
    8032:	e8 64 ff ff ff       	call   7f9b <outb>
    8037:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xa1);
    803a:	68 a1 00 00 00       	push   $0xa1
    803f:	6a 02                	push   $0x2
    8041:	e8 55 ff ff ff       	call   7f9b <outb>
    8046:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    8049:	6a 21                	push   $0x21
    804b:	6a 01                	push   $0x1
    804d:	e8 49 ff ff ff       	call   7f9b <outb>
    8052:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    8055:	68 a1 00 00 00       	push   $0xa1
    805a:	6a 01                	push   $0x1
    805c:	e8 3a ff ff ff       	call   7f9b <outb>
    8061:	83 c4 08             	add    $0x8,%esp
    outb(0xfe, 0x21);
    8064:	6a 21                	push   $0x21
    8066:	68 fe 00 00 00       	push   $0xfe
    806b:	e8 2b ff ff ff       	call   7f9b <outb>
    8070:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);
    8073:	68 a1 00 00 00       	push   $0xa1
    8078:	68 ff 00 00 00       	push   $0xff
    807d:	e8 19 ff ff ff       	call   7f9b <outb>
    8082:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    8085:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43);
    808c:	6a 43                	push   $0x43
    808e:	6a 36                	push   $0x36
    8090:	e8 06 ff ff ff       	call   7f9b <outb>
    8095:	83 c4 08             	add    $0x8,%esp
    outb((uint16_t)tmo, 0x40);
    8098:	8b 45 fc             	mov    -0x4(%ebp),%eax
    809b:	0f b6 c0             	movzbl %al,%eax
    809e:	6a 40                	push   $0x40
    80a0:	50                   	push   %eax
    80a1:	e8 f5 fe ff ff       	call   7f9b <outb>
    80a6:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    80a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80ac:	c1 f8 08             	sar    $0x8,%eax
    80af:	0f b6 c0             	movzbl %al,%eax
    80b2:	6a 40                	push   $0x40
    80b4:	50                   	push   %eax
    80b5:	e8 e1 fe ff ff       	call   7f9b <outb>
    80ba:	83 c4 08             	add    $0x8,%esp

    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xFFFF;
    80bd:	b8 4b 7e 00 00       	mov    $0x7e4b,%eax
    80c2:	66 a3 20 fa 00 00    	mov    %ax,0xfa20
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;
    80c8:	b8 4b 7e 00 00       	mov    $0x7e4b,%eax
    80cd:	c1 e8 10             	shr    $0x10,%eax
    80d0:	66 a3 26 fa 00 00    	mov    %ax,0xfa26
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    80d6:	66 c7 05 22 fa 00 00 	movw   $0x8,0xfa22
    80dd:	08 00 
    idt_table[0x20].attr = 0x8E00;
    80df:	66 c7 05 24 fa 00 00 	movw   $0x8e00,0xfa24
    80e6:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    80e8:	b8 00 c0 00 00       	mov    $0xc000,%eax
    80ed:	66 a3 12 c1 00 00    	mov    %ax,0xc112
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    80f3:	b8 80 c0 00 00       	mov    $0xc080,%eax
    80f8:	66 a3 1a c1 00 00    	mov    %ax,0xc11a
    gdt_table[SYSCALL_SEG / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    80fe:	b8 5f 7e 00 00       	mov    $0x7e5f,%eax
    8103:	66 a3 20 c1 00 00    	mov    %ax,0xc120

    pg_dir[MAP_ADDR >> 22] = (uint32_t)pg_table | PDE_P | PDE_W | PDE_U;
    8109:	b8 00 a0 00 00       	mov    $0xa000,%eax
    810e:	83 c8 07             	or     $0x7,%eax
    8111:	a3 00 b8 00 00       	mov    %eax,0xb800
    pg_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    8116:	b8 00 90 00 00       	mov    $0x9000,%eax
    811b:	83 c8 07             	or     $0x7,%eax
    811e:	a3 00 a0 00 00       	mov    %eax,0xa000
};
    8123:	90                   	nop
    8124:	c9                   	leave  
    8125:	c3                   	ret    
